<?php
// Copyright 2014-present kjenney. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Selenium WebDriver API acccessed via PHP-WebDriver
 * Input is XML of steps to follow on site
 * Ouputs as XML
 */
class Miner {
	public $driver,$source, $site, $xml, $xmlobj, $xmlarray, $parameter;
	
	public function __construct($port,$xml,$parameter) {
		// Require parameter passed
		if(strlen($parameter) > 0) {
			$host = 'http://localhost:' . $port . '/wd/hub'; // this is the default
			$capabilities = DesiredCapabilities::firefox();
			$this->driver = RemoteWebDriver::create($host, $capabilities, 5000);
		
			// Parse the XML and pass a site parameter if found
			$this->xml = $xml;
			$this->parameter = $parameter;
			$this->xmlobj = new SimpleXMLElement($xml);
			$this->xmlarray = $this->xmlobj2arr($this->xmlobj);
			$steps = $this->xmlarray['steps'];
			foreach($steps as $step) {
				if(in_array("url",$step)) { 
					$uri = (string) $this->xmlobj->site;
					$this->site = $uri . $parameter;
				} else {
					$this->site = (string) $this->xmlobj->site;
				}
			}
			//echo $this->site . "\n";
			$this->driver->get($this->site);
		} else { 
			echo "Paramter required";
		}
	}

	public function __destruct() {
       		$this->driver->quit();
   	}
	
	/**
 	* Processes input XML
 	* Extract Data after steps
 	*/
	function run() {
		//$pullcase = new SimpleXMLElement($this->xml);
		$pullcase = $this->xmlobj;
		// Run thru steps that are in the XML if there are any
		if(!empty($pullcase->steps)) {
		foreach($pullcase->steps->step as $step) {
			$command=(string)$step->command;
			$parameter=(string)$step->parameter;			
			// Skip URL Typing as this has already been done
			if($parameter!='url') {
				if($command=='type')  { 
					$this->$command($parameter,$this->parameter); 
				} else {
					$this->$command($parameter);
				}
			}
		}}
		// Extract data according to the XML
		// Save the elements as an array to pass to outXML
		$html = $this->getSource();
		//echo $html;
		return $this->outXML($html);
	}
	
	/**
 	* Outputs structured XML from $html input
 	* Uses Tidy to clean up $html
 	* Uses QueryPath to get DOM elements
 	* Uses SimpleXML to output to XML
 	*/
	function outXML($html) {
		$tidy = tidy_parse_string($html)->html()->value;
		$searchqp = htmlqp($tidy,'body');

		// Set XML based on elements in config XML
		$root = $this->xmlarray['root'];
		$element_head = $this->xmlarray['element_head'];
		$xml_output = new SimpleXMLElement("<?xml version=\"1.0\"?><" . $root . "></" . $root . ">");
		//echo $xml_output->asXML();
		
		$elements = $this->xmlarray['elements']['element'];
		$input = array();
		$output = array();
		// If more than one element to get cycle thru them
		if(!array_key_exists('input',$elements)) { 
			foreach($elements as $element) {
				$input[] = $element['input'];
				$output[] = $element['output'];
			}
		} else {
			array_push($input,$elements['input']);
			array_push($output,$elements['output']);
		}	
		
		//echo "Input\n";
		//var_dump($input);
		//echo "Output\n";
		//var_dump($output);
	
		// Create arrays out of the values generated by the input element
		for ($i = 0; $i < count($input); $i++) {
			foreach($searchqp->branch($input[$i]) as ${"branched" . $i}) {
				${"input" . $i}[] = ${"branched" . $i}->InnerHTML();
				//echo ${"branched" . $i}->InnerHTML();
			}
		}
		
		
		//var_dump($input0);
		
		// Combine values with XML
		for ($i = 0; $i < count($input0); $i++) {
			$head = $xml_output->addChild($element_head);
			for ($j = 0; $j < count($output); $j++) {
				${"value" . $i} = $head->addChild($output[$j],${"input" . $j}[$i]);
				//${"value" . $i}->addChild(${"input" . $j}[$i]);
			}
		}
		
		
		return $xml_output->asXML();
	}

	/**
 	* Input Simple XML Object
 	* Outputs array
 	*/

	function xmlobj2arr($Data) {
		if (!isset($ret)) { $ret = array(); }
		if (is_object($Data))
			{ foreach (get_object_vars($Data) as $key => $val) { $ret[$key] = $this->xmlobj2arr($val); } return $ret; }
		elseif (is_array($Data)) {
			foreach ($Data as $key => $val) { $ret[$key] = $this->xmlobj2arr($val); } return $ret;
		} else { 
			return $Data; }
	}
	
	function endsWith($haystack, $needle) {
		// search forward starting from end minus needle length characters
		return $needle === "" || strpos($haystack, $needle, strlen($haystack) - strlen($needle)) !== FALSE;
	}

	/**
 	* Get the title of the current page
 	*/
	function getTitle() {
		echo "The title is " . $this->driver->getTitle() . "'\n";
	}

	/**
 	* Type some $text into a $field passed by $array
 	*/	
	function type($field,$text) { 
		$this->driver->findElement(WebDriverBy::CssSelector($field))->sendKeys($text);
	}

	/**
 	* Click some $element passed by $array
 	*/
	function click($element) {
		$this->driver->findElement(WebDriverBy::CssSelector($element))->click();
	}

	/**
 	* Get the source of the current page
 	*/
	function getSource() {
		return $this->driver->getPageSource();
	}

}
